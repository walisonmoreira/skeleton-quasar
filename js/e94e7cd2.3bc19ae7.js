(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["e94e7cd2"],{"26dd":function(e,t,o){e.exports=o.p+"img/controller.b61adce1.png"},adeb:function(e,t,o){"use strict";o.r(t);var n=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("q-page",{attrs:{padding:""}},[n("h5",[e._v("The Project")]),n("p",[e._v("\n    The mainly purpose of this project is to provide models of possible abstractions that can be made to decouple your\n    code from the fw code. You will see unusual approaches to routers, component organization and modularization.\n  ")]),n("p",[e._v("\n    One of the pillars of this project is to expose a possible pattern of component implementation that will be\n    called Prototype Presentation Design (PPD). Below you can see a template of how this pattern works.\n  ")]),n("div",{staticClass:"text-center"},[n("img",{attrs:{src:o("d805"),alt:"Prototype Presentation Design model diagram"}})]),n("h5",[e._v("Prototype Presentation Design")]),n("p",[e._v("\n    Prototype Presentation Design will guide you not to use business logic within your components. The mantra is to\n    keep Web Components (or another render screen strategy) just as a presentation layer and never create business\n    logic within this layer.\n    PPD corrects the gap that is created by this strategy with scope management. So you declare your behaviors and\n    properties imperatively in a structure that represents the prototype of the component in question and this\n    structure will be associated with the component that will be rendered in the way that is most convenient.\n  ")]),n("h6",[e._v("Prototype Strategy")]),n("p",[e._v("\n    The Prototype is a resource that group the properties of domain of entity and specify your behaviour. The main\n    prototype will be capable of provide a minimum set of resources to construct the mainly objective of your nature.\n    It must be extensible and provide gateways to be specialized in specific contexts.\n  ")]),n("p",[e._v("\n    The behaviours of prototype structure are designed to be executed in others scopes. So the project base must be\n    capable to keep the resources provided by prototype available in the behaviours created for it.\n  ")]),n("div",{staticClass:"text-center"},[n("img",{attrs:{src:o("26dd"),alt:"Prototype Presentation Design controller diagram"}})]),n("p",[e._v("\n    How you can see in image above to say what a project implements PDD requires a layer dedicated to provide the\n    resources defined in prototype to screen rendering layer.\n  ")]),n("h6",[e._v('The "Simple Test menu"')]),n("p",[e._v('\n    In "Simple Test" menu available in drawer there is a draft about a possible implementation of Prototype Presentation\n    Design. You can see the source code of the example '),n("a",{attrs:{href:e.href}},[e._v("here")]),e._v('.\n    This link points to folder in Github of namespace of "Simple Test". There you can see the folder structure used to compose\n    the entity.\n  ')])])},r=[],a={name:"PageIndex",data:function(){return{href:"https://github.com/xprototype/skeleton-quasar/tree/master/src/domains/Example/Test"}}},s=a,i=(o("b6e7"),o("2877")),p=Object(i["a"])(s,n,r,!1,null,"429cf63a",null);t["default"]=p.exports},b6e7:function(e,t,o){"use strict";var n=o("bfd5"),r=o.n(n);r.a},bfd5:function(e,t,o){},d805:function(e,t,o){e.exports=o.p+"img/general.c8152a56.png"}}]);